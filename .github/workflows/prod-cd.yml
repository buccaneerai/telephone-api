name: Prod deployment
on:
  push:
    branches: [ master ]
env:
  STAGE: local
  COMMIT_HASH: ${{ github.sha }}
  NODE_VERSION: 16.x
jobs:
  get-next-version:
    name: Gets the next version
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}
      - name: Use node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@buccaneerai'
          always-auth: true
          cache: yarn
      - name: Setup private npm auth
        run: yarn install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      - name: Install dependencies
        run: npx ci
      - run: npx semantic-release --dry-run
        id: get-next-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      new-release-published: ${{ steps.get-next-version.outputs.new-release-published }}
      new-release-version: ${{ steps.get-next-version.outputs.new-release-version }}
  test:
    name: 'Test'
    runs-on: ubuntu-latest
    needs: [ get-next-version ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Use node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@buccaneerai'
          always-auth: true
          cache: yarn
      - name: Setup private npm auth
        run: yarn install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      - name: Run tests
        run: JWT_SECRET=alohomora yarn test
  deploy:
    needs: [ get-next-version, test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Use node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@buccaneerai'
          always-auth: true
          cache: yarn
      - name: Setup private npm auth
        run: yarn install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      - name: Build the application
        run: |
          if [[ "${YARN_BUILD}}" == "true" ]]; then
            yarn build
          fi
      - name: copy .npmrc (so Docker can install private npm packages)
        run: |
          echo "@buccaneerai:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" >> .npmrc
      - name: Build Docker image and push to GitHub Packages Registry
        uses: docker/build-push-action@v1
        id: docker_build
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          repository: buccaneerai/${{ secrets.SERVICE_NAME }}/${{ secrets.SERVICE_NAME }}
          tags: latest,${{ needs.get-next-version.outputs.new-release-version }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push docker image to AWS
        run: |
          docker build --build-arg sha=${COMMIT_HASH} -t $ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$SERVICE_NAME:$IMAGE_TAG"
        env:
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ needs.get-next-version.outputs.new-release-version }}
      - name: Update helm repo
        env:
          CI_GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
          STAGE: prod
          BRANCH: master
          VERSION: ${{ needs.get-next-version.outputs.new-release-version }}
        run: sh .github/scripts/update_helm.sh
  release:
    name: 'Release'
    needs: [ get-next-version, test, deploy ]
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}
      - name: Use node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@buccaneerai'
          always-auth: true
          cache: yarn
      - name: Install dependencies
        run: npx ci
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
        run: npx semantic-release
